// Mocks generated by Mockito 5.4.4 from annotations
// in nana/test/modules/product/product_listing/domain/use_cases/fetch_recommended_products_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fpdart/fpdart.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:nana/core/utils/errors/failure.dart' as _i5;
import 'package:nana/modules/product/product_listing/domain/entities/product.dart'
    as _i6;
import 'package:nana/modules/product/product_listing/domain/repositories/product_listing_repo.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ProductListingRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductListingRepo extends _i1.Mock
    implements _i2.ProductListingRepo {
  @override
  _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>> fetchMostUseProducts({
    required int? limit,
    required int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMostUseProducts,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>>.value(
                _i7.dummyValue<_i4.Either<_i5.Failure, List<_i6.Product>>>(
          this,
          Invocation.method(
            #fetchMostUseProducts,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>>.value(
                _i7.dummyValue<_i4.Either<_i5.Failure, List<_i6.Product>>>(
          this,
          Invocation.method(
            #fetchMostUseProducts,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>>
      fetchRecommendedProducts() => (super.noSuchMethod(
            Invocation.method(
              #fetchRecommendedProducts,
              [],
            ),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>>.value(
                    _i7.dummyValue<_i4.Either<_i5.Failure, List<_i6.Product>>>(
              this,
              Invocation.method(
                #fetchRecommendedProducts,
                [],
              ),
            )),
            returnValueForMissingStub:
                _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>>.value(
                    _i7.dummyValue<_i4.Either<_i5.Failure, List<_i6.Product>>>(
              this,
              Invocation.method(
                #fetchRecommendedProducts,
                [],
              ),
            )),
          ) as _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>> fetchSnackProducts() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSnackProducts,
          [],
        ),
        returnValue:
            _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>>.value(
                _i7.dummyValue<_i4.Either<_i5.Failure, List<_i6.Product>>>(
          this,
          Invocation.method(
            #fetchSnackProducts,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>>.value(
                _i7.dummyValue<_i4.Either<_i5.Failure, List<_i6.Product>>>(
          this,
          Invocation.method(
            #fetchSnackProducts,
            [],
          ),
        )),
      ) as _i3.Future<_i4.Either<_i5.Failure, List<_i6.Product>>>);
}
